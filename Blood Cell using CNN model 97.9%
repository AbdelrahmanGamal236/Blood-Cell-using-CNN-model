{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":2758382,"sourceType":"datasetVersion","datasetId":1683013}],"dockerImageVersionId":30646,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/abdelrahmangamal236/blood-cell-using-cnn-model-97-9?scriptVersionId=163098676\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-02-16T15:36:55.012236Z","iopub.execute_input":"2024-02-16T15:36:55.01311Z","iopub.status.idle":"2024-02-16T15:36:55.415311Z","shell.execute_reply.started":"2024-02-16T15:36:55.013066Z","shell.execute_reply":"2024-02-16T15:36:55.414557Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport keras\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import backend as K\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import TensorBoard,EarlyStopping\n\nimport sklearn.metrics as metrics\nfrom keras.callbacks import LearningRateScheduler\nfrom keras.preprocessing.image import ImageDataGenerator\nannealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x, verbose=0)","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:36:55.416826Z","iopub.execute_input":"2024-02-16T15:36:55.417106Z","iopub.status.idle":"2024-02-16T15:37:10.723317Z","shell.execute_reply.started":"2024-02-16T15:36:55.417083Z","shell.execute_reply":"2024-02-16T15:37:10.72233Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport pandas as pd\n\nBenign_dir = [ r'/kaggle/input/blood-cell-cancer-all-4class/Blood cell Cancer [ALL]/Benign']\n\nMalignant_Pre_B_dirs = [\n    r'/kaggle/input/blood-cell-cancer-all-4class/Blood cell Cancer [ALL]/[Malignant] Pre-B'\n]\n\nMalignant_Pro_B_dirs = [\n    r'/kaggle/input/blood-cell-cancer-all-4class/Blood cell Cancer [ALL]/[Malignant] Pro-B'\n]\n\nMalignant_early_Pre_B_dirs = [\n    r'/kaggle/input/blood-cell-cancer-all-4class/Blood cell Cancer [ALL]/[Malignant] early Pre-B'\n]\n\nfilepaths = []\nlabels = []\ndict_lists = [Benign_dir, Malignant_Pre_B_dirs,Malignant_Pro_B_dirs, Malignant_early_Pre_B_dirs]\nclass_labels = ['Benign', 'Malignant_Pre-B', 'Malignant_Pro-B', 'Malignant_early Pre-B']\n\nfor i, dir_list in enumerate(dict_lists):\n    for j in dir_list:\n        flist = os.listdir(j)\n        for f in flist:\n            fpath = os.path.join(j, f)\n            filepaths.append(fpath)\n            labels.append(class_labels[i])\n\nFseries = pd.Series(filepaths, name=\"filepaths\")\nLseries = pd.Series(labels, name=\"labels\")\nbloodCell_data = pd.concat([Fseries, Lseries], axis=1)\nbloodCell_df = pd.DataFrame(bloodCell_data)\nprint(bloodCell_df.head())\nprint(bloodCell_df[\"labels\"].value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:10.724602Z","iopub.execute_input":"2024-02-16T15:37:10.725285Z","iopub.status.idle":"2024-02-16T15:37:10.763338Z","shell.execute_reply.started":"2024-02-16T15:37:10.725256Z","shell.execute_reply":"2024-02-16T15:37:10.76249Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bloodCell_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:10.765694Z","iopub.execute_input":"2024-02-16T15:37:10.765972Z","iopub.status.idle":"2024-02-16T15:37:10.772511Z","shell.execute_reply.started":"2024-02-16T15:37:10.765949Z","shell.execute_reply":"2024-02-16T15:37:10.771604Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_images, test_images = train_test_split(bloodCell_df, test_size=0.3, random_state=42)\ntrain_set, val_set = train_test_split(bloodCell_df, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:10.773634Z","iopub.execute_input":"2024-02-16T15:37:10.773968Z","iopub.status.idle":"2024-02-16T15:37:10.788455Z","shell.execute_reply.started":"2024-02-16T15:37:10.773938Z","shell.execute_reply":"2024-02-16T15:37:10.787623Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_set.shape)\nprint(test_images.shape)\nprint(val_set.shape)\nprint(train_images.shape)","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:10.789568Z","iopub.execute_input":"2024-02-16T15:37:10.789821Z","iopub.status.idle":"2024-02-16T15:37:10.794828Z","shell.execute_reply.started":"2024-02-16T15:37:10.789801Z","shell.execute_reply":"2024-02-16T15:37:10.793998Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"image_gen = ImageDataGenerator(preprocessing_function= tf.keras.applications.mobilenet_v2.preprocess_input)\ntrain = image_gen.flow_from_dataframe(dataframe= train_set,x_col=\"filepaths\",y_col=\"labels\",\n                                      target_size=(244,244),\n                                      color_mode='rgb',\n                                      class_mode=\"categorical\", \n                                      batch_size=8,\n                                      shuffle=False            \n                                     )\ntest = image_gen.flow_from_dataframe(dataframe= test_images,x_col=\"filepaths\", y_col=\"labels\",\n                                     target_size=(244,244),\n                                     color_mode='rgb',\n                                     class_mode=\"categorical\",\n                                     batch_size=8,\n                                     shuffle= False\n                                    )\nval = image_gen.flow_from_dataframe(dataframe= val_set,x_col=\"filepaths\", y_col=\"labels\",\n                                    target_size=(244,244),\n                                    color_mode= 'rgb',\n                                    class_mode=\"categorical\",\n                                    batch_size=8,\n                                    shuffle=False\n                                   )","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:10.79622Z","iopub.execute_input":"2024-02-16T15:37:10.796812Z","iopub.status.idle":"2024-02-16T15:37:12.260504Z","shell.execute_reply.started":"2024-02-16T15:37:10.796779Z","shell.execute_reply":"2024-02-16T15:37:12.259679Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"classes=list(train.class_indices.keys())\nprint (classes)","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:12.261481Z","iopub.execute_input":"2024-02-16T15:37:12.261758Z","iopub.status.idle":"2024-02-16T15:37:12.266623Z","shell.execute_reply.started":"2024-02-16T15:37:12.261734Z","shell.execute_reply":"2024-02-16T15:37:12.265738Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def show_Blood_images(image_gen):\n    test_dict = test.class_indices\n    classes = list(test_dict.keys())\n    images, labels=next(image_gen) # get a sample batch from the generator\n    plt.figure(figsize=(20,20))\n    length = len(labels)\n    if length<25:\n        r=length\n    else:\n        r=25\n    for i in range(r):\n        plt.subplot(5,5,i+1)\n        image=(images[i]+1)/2 #scale images between 0 and 1\n        plt.imshow(image)\n        index=np.argmax(labels[i])\n        class_name=classes[index]\n        plt.title(class_name, color=\"green\",fontsize=16)\n        plt.axis('off')\n    plt.show()\nshow_Blood_images(train)","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:12.267675Z","iopub.execute_input":"2024-02-16T15:37:12.268062Z","iopub.status.idle":"2024-02-16T15:37:13.651654Z","shell.execute_reply.started":"2024-02-16T15:37:12.268039Z","shell.execute_reply":"2024-02-16T15:37:13.650541Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = keras.models.Sequential([\n    keras.layers.Conv2D(filters=128, kernel_size=(8, 8), strides=(3, 3), activation='relu', input_shape=(224, 224, 3)),\n    keras.layers.BatchNormalization(),\n    \n    keras.layers.Conv2D(filters=256, kernel_size=(5, 5), strides=(1, 1), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPool2D(pool_size=(3, 3)),\n    \n    keras.layers.Conv2D(filters=256, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(filters=256, kernel_size=(1, 1), strides=(1, 1), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(filters=256, kernel_size=(1, 1), strides=(1, 1), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    \n    keras.layers.Conv2D(filters=512, kernel_size=(3, 3), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPool2D(pool_size=(2, 2)),\n    \n    keras.layers.Conv2D(filters=512, kernel_size=(3, 3), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    \n    keras.layers.Conv2D(filters=512, kernel_size=(3, 3), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    \n    keras.layers.MaxPool2D(pool_size=(2, 2)),\n    \n    keras.layers.Conv2D(filters=512, kernel_size=(3, 3), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    \n    keras.layers.MaxPool2D(pool_size=(2, 2)),\n    \n    keras.layers.Flatten(),\n    keras.layers.Dense(1024, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(1024, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(4, activation='softmax')\n])\n\nmodel.compile(\n    loss='categorical_crossentropy',\n    optimizer=tf.optimizers.SGD(learning_rate=0.001),\n    metrics=['accuracy']\n)\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:13.656508Z","iopub.execute_input":"2024-02-16T15:37:13.656943Z","iopub.status.idle":"2024-02-16T15:37:14.943778Z","shell.execute_reply.started":"2024-02-16T15:37:13.656902Z","shell.execute_reply":"2024-02-16T15:37:14.942904Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from keras.utils import plot_model\n\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:14.945144Z","iopub.execute_input":"2024-02-16T15:37:14.94555Z","iopub.status.idle":"2024-02-16T15:37:15.347591Z","shell.execute_reply.started":"2024-02-16T15:37:14.945514Z","shell.execute_reply":"2024-02-16T15:37:15.346778Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"history = model.fit(train, epochs=10, validation_data=val, verbose=1)","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:37:15.348709Z","iopub.execute_input":"2024-02-16T15:37:15.349034Z","iopub.status.idle":"2024-02-16T15:44:44.139883Z","shell.execute_reply.started":"2024-02-16T15:37:15.349006Z","shell.execute_reply":"2024-02-16T15:44:44.138907Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"history1 = model.fit(train, epochs=1, validation_data=val, verbose=1)","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:44:44.141285Z","iopub.execute_input":"2024-02-16T15:44:44.141585Z","iopub.status.idle":"2024-02-16T15:45:24.235801Z","shell.execute_reply.started":"2024-02-16T15:44:44.141558Z","shell.execute_reply":"2024-02-16T15:45:24.235008Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.evaluate(test, verbose=1)","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:45:24.237099Z","iopub.execute_input":"2024-02-16T15:45:24.237418Z","iopub.status.idle":"2024-02-16T15:45:44.845959Z","shell.execute_reply.started":"2024-02-16T15:45:24.237391Z","shell.execute_reply":"2024-02-16T15:45:44.845044Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.save(\"Blood Cell.h5\")","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:45:44.847207Z","iopub.execute_input":"2024-02-16T15:45:44.847557Z","iopub.status.idle":"2024-02-16T15:45:45.142537Z","shell.execute_reply.started":"2024-02-16T15:45:44.847525Z","shell.execute_reply":"2024-02-16T15:45:45.141729Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pred = model.predict(test)\npred = np.argmax(pred, axis=1)\n\nlabels = (train.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred2 = [labels[k] for k in pred]","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:45:45.143568Z","iopub.execute_input":"2024-02-16T15:45:45.143862Z","iopub.status.idle":"2024-02-16T15:45:57.02566Z","shell.execute_reply.started":"2024-02-16T15:45:45.14382Z","shell.execute_reply":"2024-02-16T15:45:57.024553Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.plot(history.history['accuracy'] + history1.history['accuracy'])\nplt.plot(history.history['val_accuracy'] + history1.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:45:57.027056Z","iopub.execute_input":"2024-02-16T15:45:57.02743Z","iopub.status.idle":"2024-02-16T15:45:57.268348Z","shell.execute_reply.started":"2024-02-16T15:45:57.027395Z","shell.execute_reply":"2024-02-16T15:45:57.267319Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.plot(history.history['loss'] + history1.history['loss'])\nplt.plot(history.history['val_loss'] + history1.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:45:57.269446Z","iopub.execute_input":"2024-02-16T15:45:57.269731Z","iopub.status.idle":"2024-02-16T15:45:57.485034Z","shell.execute_reply.started":"2024-02-16T15:45:57.269706Z","shell.execute_reply":"2024-02-16T15:45:57.484204Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, accuracy_score\n\ny_test = test_images.labels # set y_test to the expected output\nprint(classification_report(y_test, pred2))\nprint(\"Accuracy of the Model:\",\"{:.1f}%\".format(accuracy_score(y_test, pred2)*100))","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:45:57.486252Z","iopub.execute_input":"2024-02-16T15:45:57.486543Z","iopub.status.idle":"2024-02-16T15:45:57.528747Z","shell.execute_reply.started":"2024-02-16T15:45:57.486508Z","shell.execute_reply":"2024-02-16T15:45:57.527896Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\n\nclass_labels = ['Benign', 'Malignant_Pre-B', 'Malignant_Pro-B', 'Malignant_early Pre-B']\n\n\ncm = confusion_matrix(y_test, pred2)\n\nplt.figure(figsize=(10, 7))\nsns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues')\n\nplt.xticks(ticks=[0.5, 1.5, 2.5, 3.5], labels=class_labels)\nplt.yticks(ticks=[0.5, 1.5, 2.5, 3.5], labels=class_labels)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\n\nplt.title(\"Confusion Matrix\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-16T15:45:57.529885Z","iopub.execute_input":"2024-02-16T15:45:57.530281Z","iopub.status.idle":"2024-02-16T15:45:57.97503Z","shell.execute_reply.started":"2024-02-16T15:45:57.530251Z","shell.execute_reply":"2024-02-16T15:45:57.974149Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null}]}